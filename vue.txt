vue2.x


  (1）侦听器(watch)不仅可以侦听data中的属性，还可以侦听computed中的属性（props中的属性应该也能）




（2）在vue中使用typescript: 在官网的生态系统>vue资源中可以找到相关教程

一个简单示例地址：https://segmentfault.com/a/1190000011744210?utm_source=tuicool&utm_medium=referral



（3）异步组件，最好在大型的项目中使用，小型项目无需使用，因为会增加http请求



（4）img标签src和元素background-image属性的绑定方式

<img :src="require('../../../assets/images/' + item.fileName + '.png')">
<div :style="{backgroundImage: 'url(' + require('../../../assets/images/' + item.fileName + '.png') + ')'}"></div>


（5）在v-if, v-for, v-show的异步渲染中，需要在setTimeout中才能获取到this.$refs,  另外，用this.$nextTick也能获取到this.$refs，
但是，获取到元素的属性值与实际值不一致





（6）在div元素上绑定keyup事件的方式：

首先在该div元素上添加tabindex="0"使该元素可以获取焦点，然后再调用focus()方法自动获取该元素的焦点，最后即可绑定keyup事件，大致代码如下：


// 注册一个全局自定义指令 `v-focus`
Vue.directive("focus", {
  // 当被绑定的元素插入到 DOM 中时……
  inserted: function(el) {
    // 聚焦元素
    el.focus();
  }
});


<div tabindex="0" v-focus @keyup.up.down.left.right="onKeyup"></div>




（7）静态页面用iframe引用要放在public目录下，如果放在assets目录下该页面会因为编译而报错




（8）常用UI库：element, iView, ant-design-vue



（9）在官网有事拷贝的css过渡不生效，此时改一下class名再试试，有可能和别的class名重复了

  <transition name="fade11">
    <p v-if="show">hello</p>
  </transition>

.fade11-enter-active, .fade11-leave-active {
  transition: opacity .3s;
}
.fade11-enter, .fade11-leave-to /* .fade-leave-active below version 2.1.8 */ {
  opacity: 0;
}




（10）自定义v-model

    在名为MyDialog组件内部有这样代码用于实现自定义v-model
    model: {
        prop: 'isShow',
        event: 'change'
    },
    props: {
        isShow: Boolean,
        default: false
    },

    在组件内部改变isShow属性值的方式：$emit('change', false) 或 $emit('change', true)


   在组件外部便可以实现数据的双向绑定和事件监听

   <my-dialog v-model="isShowDialog" @change="onShowChange"></my-dialog>


























