

（1）

overflow-y

超出条件：子元素的宽必须大于父元素的宽，且要指定宽高

favicon.ico

参考网站：http://www.chinahuangshan.gov.cn/

sublime 常用插件

BracketHighlighter高亮显示匹配的括号、引号和标签
BracketHighlighter这个插件能在左侧高亮显示匹配的括号、引号和标签，能匹配的[]?,??()?,??{}?,??""?,??''?,?<tag></tag>等甚至是自定义的标签，当看到密密麻麻的代码分不清标签之间包容嵌套的关系时，这款插件就能很好地帮你理清楚代码结构，快速定位括号，引号和标签内的范围。

TrailingSpacer高亮显示多余的空格和Tab
有时候在代码结尾打多了几个空格或Tab，一般不会察觉，TrailingSpacer这款插件能高亮显示多余的空格和Tab，并可以一键删除它们，有代码洁癖的朋友应该会喜欢这个插件。
注意，在github上下载的插件缺少了一个设置快捷键的文件，可以新建一个名字和后缀为Default (Windows).sublime-keymap的文件，添加以下代码，即可设置“删除多余空格”和“是否开启TrailingSpacer ”的快捷键了。
[
{ "keys":["ctrl+alt+d"], "command":"delete_trailing_spaces"},

{ "keys":["ctrl+alt+o"], "command":"toggle_trailing_spaces"}]


Alignment 等号对齐
按Ctrl+Alt+A，可以是凌乱的代码以等号为准左右对其，适合有代码洁癖的朋友。

插件下载：?https://github.com/kevinsperrine/sublime_alignment/tree/python3
Clipboard-history 粘贴板历史记录
有了这个插件，便可方便使用sublime text 3里的粘贴板历史记录内容，快捷键Ctrl+Shift+V可调出该历史记录面板，按方向键选择想要粘贴的历史记录。不过这是sublime text 2下的插件，Ctrl+Shift+D清除粘贴板历史记录好像不能生效，不过重启sublime也可清除粘贴板的历史记录。

插件下载：?https://github.com/kemayo/sublime-text-2-clipboard-history

SideBarEnhancements侧边栏增强
SideBarEnhancements本是增强侧边栏的插件，这里将教大家如何用来做sublime text 3浏览器预览插件，并可自定义浏览器预览的快捷键。

安装此插件，点击工具栏的preferences > package setting > side bar > Key Building-User，键入以下代码，这里设置按Ctrl+Shift+C复制文件路径，按F1~F5分别在firefox，chrome，IE，safari，opera浏览器预览效果，当然你也可以自己定义喜欢的快捷键，最后注意代码中的浏览器路径要以自己电脑里的文件路径为准。

Pretty JSON   格式化json文件  ctrl+alt+j

swiper横向播放时可以不设置高








（2）技巧

var boo = true;

boo && fn1() || fn2()      -------如果boo为true调用fn1,否则调用fn2






（3）
    position: absolute;
    top: 0;
    bottom: 0;
    left: 0;
    right: 0;    --------------------只有遵循这个顺序才能与父元素同宽同高






（4）
    $element.off( 'click');  //移除click事件上绑定的所有事件处理程序，不管是具名函数还是匿名函数(前提是用on方法绑定的)





（5）JS中给正则表达式加变量 

可以用构造函数来生成正则表达式
var re = new RegExp("^\\d+$","gim"); //注意，反斜杠需要转义
那么，给它加变量，就和我们前面写的给字符串加变量一样了。
var v = "bl";
var re =new RegExp("^\\d+" + v + "$","gim"); // re为/^\d+bl$/gim
至此，最初的问题问题也完全解决了。
?
?
另外，还有一种方法是用过eval动态执行一段字符串的方法，不过我觉得从各方面来说，都属下策。
var re = eval("/^\\d+" + v + "$/gim")






（6）对象数组排序
	var d = [
 	 {
	    "ip": "10.224.97.81",
	    "name": "自动站文件分发服务器",
	    "rectime": "20170606175000",
	    "sendtime": "20170606183600"
	  },
	  {
	    "ip": "10.224.97.82",
	    "name": "雷达数据分发服务器",
	    "rectime": "20170605080100",
	    "sendtime": "20170606173200"
	  }
	]
        	//对象数组排序（按元素对象中的filetime值由大到小排）
        	d.sort(function (a, b) {
            		var _a = self.common_toDate(a.filetime).getTime();
            		var _b = self.common_toDate(b.filetime).getTime();
            		return _b - _a;
        	});






（7）使用button时要指定 type="button"  不然点击时会刷新页面






（8）移动端应使用html5原生的date控件，体验更好，样式不满足可以修改

<input type="date|month|week|time|datetime|datetime-local" />   选择时间的变化应该可以用input事件监听（没有测过，应该可以）






（9）  replace中$符的使用：

'201707'.replace(/(\d{2}$)/, '年$1月')    -----$1存储第一个分组内的正则匹配到的值    输出结果为：2017年07月；

'2017-07-17 18:34:55'.match(/\d{2}-\d{2}\s\d{2}/)[0].replace(/^(\d{2})-(\d{2})\s(\d{2})$/, ' 黄山旅游气象台$1月$2日$3时发布')

'#ff00ee'.replace(/^#(.{2})(.{2})(.{2})/, function (all, $1, $2, $3) {console.log(all, $1, $2, $3);return ''})


（10）大数据循环时要考量性能（在满足条件时，foreach可以使用return false跳出循环，以减少循环次数；在满足条件时，在需求代码后面，删除该项元素，以减少循环次数），如下

	var str = '';
	// 用stationIds固定原有已排列好的数据（返回的数据跟我areaList中排列的顺序是不一致的）
	stationIds.forEach(function (el) {
		var isHas = false;
		dataList.forEach(function (sonel, index, arr) {
			if (el === sonel.obsstationid) {
			var itemData = priSelf.dataFormat(sonel);
			// 表格数据
			str += '<tr id="'+ itemData.obsstationid +'">';
			str += '<td>'+ itemData.obsstationid +'</td>';  //观测站号
			str += '<td>'+ itemData.obsdatetime +'</td>';  //观测日期时间
			str += '<td>'+ itemData.precipation +'</td>';  //1h降水量
			str += '<td>'+ itemData.r05 +'</td>';  //5分钟降水量
			str += '<td>'+ itemData.r20 +'</td>';  //20-当前降水量
			str += '<td>'+ itemData.temp +'</td>';  //气温
			str += '<td>'+ itemData.dewpoint +'</td>';  //露点温度
			str += '<td>'+ itemData.rh +'</td>';  //相对湿度
			str += '<td>'+ itemData.stationpressure +'</td>';  //气压
			str += '<td>'+ itemData.windvelocity +'</td>';  //2分钟风速
			str += '<td>'+ itemData.windd10ms +'</td>';  //2分钟风向
			str += '<td>'+ itemData.hexmaxwindv +'</td>';  //极大风速
			str += '<td>'+ itemData.hexmaxwindd +'</td>';  //极大风向
			str += '<td>'+ itemData.visibility10min +'</td>';  //能见度
			str += '</tr>';
			isHas = true;
			arr.splice(index, 1);  //在数据保存后就删掉该条数据，以减少循环数
			return false;  //直接跳出循环，以减少循环数
			}
		});
		//没有数据也要占位置
		if (!isHas) {  
			str += '<tr id="'+ el +'">';
			str += '<td>'+ el +'</td>';  //观测站号
			str += '<td>/</td>';  //观测日期时间
			str += '<td>/</td>';  //1h降水量
			str += '<td>/</td>';  //5分钟降水量
			str += '<td>/</td>';  //20-当前降水量
			str += '<td>/</td>';  //气温
			str += '<td>/</td>';  //露点温度
			str += '<td>/</td>';  //相对湿度
			str += '<td>/</td>';  //气压
			str += '<td>/</td>';  //2分钟风速
			str += '<td>/</td>';  //2分钟风向
			str += '<td>/</td>';  //极大风速
			str += '<td>/</td>';  //极大风向
			str += '<td>/</td>';  //能见度
			str += '</tr>';									
		}
	});



（11）socketRendererGis在频繁调用时如果用2判断，因为要操作dom会相当消耗性能（轻则卡顿，重则崩溃），即使该dom已经保存起来了，但仍然会去操作dom的属性

function socketRendererGis (data) {
	if (!self.isShowDataMap) return;  //1.最好给状态提前保存起来
	// if (self.$dataMap.is(':hidden')) return;  //2.该处太消耗性能，以用上面的方式代替
}





（12）JS的事件频繁触发，只执行最后一次 ，比如连续点击触发的click事件，而并不是指（mousemove, resize）事件的节流

有时候我们在JS编程的过程中经常遇到一个问题就是事件频繁高速被触发，利用计时器来控制频率又会丢弃掉有用的事件，我们只是想让程序执行最后一次的事件，那么就可以用如下方法解决问题

//写在事件外边，防止被注销
var iTime; 

//写在事件内部
   clearTimeout(iTime);
    iTime = setTimeout(function () {  //限制连续点击，如果连续点击的间隔时间一直小于延时器的时间，就永远不会触发延时器的回调
        //需要执行的事件
    }, 100);

如果大家有更好的方法解决此问题欢迎留言，希望和大家一起沟通学习





（13）change 和 input，propertychange的区别：

change ：在input失去焦点并且值改变时触发，js动态改变的值不会触发
 input，propertychange ：在input值改变时触发，js动态改变的值不会触发



（14）jquery index()
$dom.index() -------相对于$dom的父元素获取$dom的位置
$list.index(selector|jquery dom) ------ 有参数（jquery选择器或者jquery对象）时表示参数中获取的jquery dom在$list中的位置






（15）解析这个语法： obj && fn1() || fn2()

解析： 假如obj是一个对象，会调用默认的toString方法（该方法可以被重写），然后将该方法的返回值进行隐式转换，如果为true则调用fn1，
如果fn1没有返回值，则会默认返回undefined, 就隐式转换成了false, 最后obj && fn1()表达式为false,于是也执行了fn2；如果fn1有返回值且能
隐式转换为true,则obj && fn1()表达式返回true, 由于||是短路操作（&&也是），所以fn2不被调用





（16）移动端浏览器给body元素添加overflow:hidden失效的解决方案：

我项目中的解决方案：相当于是网上的三种解决方案中的第一种（其他的在我的项目中均无效）
html, body {
  height: 100%;
  overflow: hidden !important;
  
}
body {
  position:fixed;
  width: 100%;
}

网上的三种解决方案：
1、body加position:fixed;width:100%;height:100%。
2、给要滚动的元素添加一个父级，设定高度，overflow：auto；
3、html,body{height:100%;overflow:hidden}
建议使用第三种，可以把overflow:hidden作为一个单独的隐藏类，更方便控制。




（17） 针对animationend和transitionend多次执行的问题解决方案 

对于animationend事件来说的话，如果我们在外层添加这个事件监听，如果监听元素里面还有动画，则里面元素动画结束也会执行这个animationend事件。所以我们可以这样做：

if(e.target === this) {
    console.log('end');
}
或者
if(e.target === e.currentTarget) {
    console.log('end');
}

对于transitionend事件多次执行，一般情况下是因为监听元素有多个属性同时变化，所以执行多次transitionend事件，而且如果里面有子元素还会监听子元素的end事件，所以我们针对transitionEnd事件需要这样做：

var transitionFlag = true;
wrap.addEventListener('webkitTransitionEnd',function(e){
    if(e.target === e.currentTarget && transitionFlag) {
        transitionFlag = false;
        console.log('end');
    }
},false);
或者
var transitionFlag = true;
wrap.addEventListener('webkitTransitionEnd',function(e){
    if(e.target === this && transitionFlag) {
        transitionFlag = false;
        console.log('end');
    }
},false);









（18）js中url地址中文乱码的问题（在IE中会出现问题，chrome中没事，firefox中未测）：

使用encodeURI对整个url进行编码








（19） 用css使文本两端对齐： https://segmentfault.com/a/1190000011336392
（20）js Math.random():   https://www.cnblogs.com/javaScriptYang/p/5684797.html






（21）循环数组的下标

const arr = [1,2,3,4,5,6,7,8,9];
const leng = arr.length;
let currIndex = 0;
setInterval(() => {
  console.log(arr[currIndex]);
  currIndex = (currIndex + 1) % leng;   //当currIndex等于数组的最后一个下标后将currIndex重置为0
}, 1000);




（22）Object.prototype.toString.call(某一数据类型的对象);  可用于判断数据类型

例： const num = 2; Object.prototype.toString.call(num );  ---- 返回："[object Number]"

例： const arr = [1,1]; Object.prototype.toString.call(arr );  ---- 返回："[object Array]"

此外，function,date,string,boolean,undefined,null，RegExp等都能以该种方式判断类型

注意： 由于Object对象原型下的toString()方法能被重写，所以在使用时请确保Object对象下的toString()方法没有被重写

例： 
Object.prototype.toString = function () {return 'xxx'}

Object.prototype.toString.call(1)
  ----返回："xxx"




（23）typeof判断数据类型

typeof只能判断出undefined, string, number, boolean, function类型，而没有办法区分array, abject, null, Date, RegExp等类型对象，他们都返回'object'






（24） bluebird.js ：可以让让所有浏览器都支持 ES6 Promise 对象（主要针对ie）








（25）得到一个  >=8 && <=40 的数

  resize(delta: number) {
    this.size = Math.min(40, Math.max(8, +this.size + delta));
    this.sizeChange.emit(this.size);
  }










（26）Object.assign(target, sourse,....)   实现的是浅拷贝，即sourse中的属性值如果为引用数据类型时，在target中属性对应的值为sourse中的引用

例： let  sourseObj = { name: 'dong', place: {x: 10, y: 20} }; let targetObj = {name: 'zhang'};

执行 Object.assign(targetObj , sourseObj )后：targetObj 值为： {name: 'dong', place: {x: 10, y: 20}}；

此时令sourseObj.place.x = 1000, 则targetObj.place.x的值为1000， 这就是浅拷贝，对于基本数据类型的属性值不存在引用问题，如：

sourseObj.name = 'xxxx' 则 targetObj.name依然为 'dong'





（27）深拷贝










（28）break可用于跳出for循环，而return false则不能，forEach没法跳出循环










（29）有时让某一个元素固定定位后会盖住祖先元素（非body元素）的滚动条(如果有的话)，此时对该祖先元素也进行固定定位即可









(30) 正则[]中-的用法：[0-9a-fA-F]   匹配0到9，a到f，A到F中的一个字符

'#ff00ee'.replace(/^#[0-9a-fA-F]{2}/, '00');   ------ '0000ee'










（31）正则（）中 | 的用法：(ff|ee)  匹配'ff'或'ee'中的一个

'#ff00ee'.replace(/(ff|ee)/g, '00') ------ '#000000'




  (32) $img.attr('src', data.data.imgPath.replace('/proxy/', 'http://'));  //带上协议才会显示图片






（33）js 如何一次性删除数组中的多个元素？ 

用for循环或者forEach遍历数组的话，在方法体内部splice都得不到正确的结果，解决方法是使用逆向循环

方法一，用 filter
var arr = [2, 3, 5, 7];
arr = arr.filter(item => item !== 5);

方法二，用逆向循环
var arr = [2, 3, 5, 7];
for (let i = arr.length - 1; i >= 0; i--) {
    if (arr[i] === 5) {
        arr.splice(i, 1);
    }
}








（34）将数据中的无效值先去掉再排序， 最后再将无效值放在排序好的数据的后面


  /**
   * 纯洁的排序，无效值不参于排序，并将其放在排序后的数组后面(对于对象数组而言)
   * 
   * @param arr 要排序的数组
   * @param sortKey 要排序的元素的键
   * @param sortType 直接用string排序还是用number排序  string | number
   * @param isAsc 是否升序 默认true
   */ 
  pureSort(arr: any[], sortKey: string, sortType: string, isAsc: boolean = true) {
    let inVoid = [];
    for (let i = arr.length - 1; i >= 0; i--) {  //使用逆向循环才能删除要排除的元素
      const el = arr[i];
      const sortItem = el[sortKey];
      if (sortItem == '' || sortItem == null || sortItem == undefined || sortItem == '9999') {
        inVoid.push(el);
        arr.splice(i, 1);
      }
    }
    arr = arr.sort((a, b) => {
      let la, lb;
      if (sortType == 'number') {
        la = parseFloat(a[sortKey]);
        lb = parseFloat(b[sortKey]);
        return isAsc ? (lb - la) : (la - lb);
      }else {
        la = a[sortKey] + '';
        lb = b[sortKey] + '';
        return  isAsc ? lb.localeCompare(la) : la.localeCompare(lb);
      }
    });

    arr.push(...inVoid.reverse());
  }











（35）对象数组多条件排序
var arr= [ 
    { 'sortNo': 2, 'sortNo2': 3},
    { 'sortNo': 1, 'sortNo2': 3},
    { 'sortNo': 5, 'sortNo2': 3},
    { 'sortNo': 6, 'sortNo2': 3},
    { 'sortNo': 7, 'sortNo2': 3},
    { 'sortNo': 3, 'sortNo2': 4},
    { 'sortNo': 3, 'sortNo2': 2},
    { 'sortNo': 3, 'sortNo2': 1},
    { 'sortNo': 3, 'sortNo2': 3},
    { 'sortNo': 8, 'sortNo2': 3},
    { 'sortNo': 4, 'sortNo2': 1},
    { 'sortNo': 4, 'sortNo2': 2}
];
arr.sort(function(a, b){
    if (a.sortNo === b.sortNo) {
            return b.sortNo2 - a.sortNo2;
    } else {
            return a.sortNo - b.sortNo;
    }
});
console.log(arr); 

//输出结果
//{ 'sortNo': 1, 'sortNo2': 3}
//{ 'sortNo': 2, 'sortNo2': 3}
//{ 'sortNo': 3, 'sortNo2': 4}
//{ 'sortNo': 3, 'sortNo2': 3}
//{ 'sortNo': 3, 'sortNo2': 2}
//{ 'sortNo': 3, 'sortNo2': 1}
//{ 'sortNo': 4, 'sortNo2': 2}
//{ 'sortNo': 4, 'sortNo2': 1}
//{ 'sortNo': 5, 'sortNo2': 3}
//{ 'sortNo': 6, 'sortNo2': 3}
//{ 'sortNo': 7, 'sortNo2': 3}
//{ 'sortNo': 8, 'sortNo2': 3}   



（36）如何在github上搭建网站
https://www.cnblogs.com/camille666/p/how_to_build_website_at_github.html











