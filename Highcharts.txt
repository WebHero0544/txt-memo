Highcharts

注：Highcharts 从 4.2.0 开始，已经不依赖 jQuery（参考例子），如果你的页面中不需要 jQuery，
那么无需引入；不依赖 jQuery 的原因是我们将去掉了适配器并支持 CommonJS 模块标准，也就是
说 Highcharts 可以在所有 CommonJS 规范下的环境中运行（例如 Nodejs），这也使得我们的产
品可以结合目前市面上常用的库使用，例如 React、Browserify 、Webpack、Vue、AngularJS 等。


官网：https://www.hcharts.cn




（1）多个箱线图在x轴上无法对齐的原因在于在series配置中默认启用了分组，即grouping = true, 使grouping = false即可





（2）在angular2+中怎么引入导出功能
import Highcharts from "highcharts";
require("highcharts/highcharts-more")(Highcharts);
require('highcharts/modules/exporting')(Highcharts);
require('highcharts/modules/offline-exporting')(Highcharts);

或者
import Highcharts from "highcharts"
import HighchartsMore from "highcharts/highcharts-more"
import HighchartsExporting from 'highcharts/modules/exporting'
import HighchartsOfflineExporting from 'highcharts/modules/offline-exporting'
HighchartsMore((Highcharts))
HighchartsExporting(Highcharts)
HighchartsOfflineExporting(Highcharts)



Highcharts.setOptions({
      lang: {
        contextButtonTitle: '下载',
        printChart: '打印',
        downloadPNG: '导出PNG格式',
        downloadJPEG: '导出JPEG格式',
        downloadPDF: '导出PDF格式',
        downloadSVG: '导出SVG格式'
      }
    });




      exporting: {
        chartOptions: {
          plotOptions: {
            series: {
              dataLabels: {
                enabled: true
              }
            }
          }
        },
        fallbackToExportServer: false,
        filename: '多要素实况-预报折线图',
        buttons: {
          contextButton: {
            menuItems: ['downloadPNG']
          }
        },
        scale: 6
      },





（3）highcharts自定义symbol, 下面symbol表示风向标

    // option.rotate表示风向
    Highcharts.SVGRenderer.prototype.symbols.cross = function (x, y, w, h, option) {
      const centerLeng = 10;
      const hypLeng = 18;
      const iconAngle = 60;

      //角度
      const angle = option.rotate; 

      // 顶点（绝对路径）
      const topX = x + centerLeng * Math.cos(angle);
      const topY = y + centerLeng * Math.sin(angle);

      // 左侧点（相对路径，相对于顶点）
      const leftX = hypLeng * Math.cos(angle + iconAngle);
      const leftY = hypLeng * Math.sin(angle + iconAngle);

      // 右侧点（相对路径，相对于顶点）
      const rightX = hypLeng * Math.cos(angle - iconAngle);
      const rightY = hypLeng * Math.sin(angle - iconAngle);

      return ['M', topX, topY, 'l', leftX, leftY, 'L', x, y, 'M', topX, topY, 'l', rightX, rightY, 'L', x, y];
    };
    if (Highcharts.VMLRenderer) {
      Highcharts.VMLRenderer.prototype.symbols.cross = Highcharts.SVGRenderer.prototype.symbols.cross;
    }

    Highcharts.setOptions({
      lang: {
        contextButtonTitle: "下载",
        printChart: "打印",
        downloadPNG: "导出PNG格式",
        downloadJPEG: "导出JPEG格式",
        downloadPDF: "导出PDF格式",
        downloadSVG: "导出SVG格式"
      }
    });





（4）当数据过长时仍让数据正常显示（如果需要关掉性能阈值检查，可以将此参数设置为 0，默认是：1000）

      plotOptions: {
        spline: {
          turboThreshold: 0
        },
        column: {
          turboThreshold: 0
        }
      }









